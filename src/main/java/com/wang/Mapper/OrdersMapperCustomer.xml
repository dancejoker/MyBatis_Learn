<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wang.Mapper.OrdersMapperCustomer">

    <resultMap id="OrdersUserResultMap" type="Orders">
        <!--
            column:订单信息的唯一标示 列
            property:订单信息的唯一标示 列所映射到Orders中哪个属性
        -->
        <id column="id" property="id"></id>
        <result column="user_id" property="userId"></result>
        <result column="number" property="number"></result>
        <result column="createtime" property="createtime"></result>
        <result column="note" property="note"></result>

        <!--
            配置映射的关联的用户信息
            association:用于映射关联查询单个对象的信息
            property:要将关联查询的用户信息映射到Order类的哪个属性中
        -->
        <association property="user" javaType="com.wang.po.User">
            <!--
                id:关联查询用户的唯一标示
                column:指定唯一标示用户信息的列
                property:映射到user的哪个属性
            -->
            <id column="user_id" property="id"></id>
            <result column="username" property="username"></result>
            <result column="sex" property="sex"></result>
            <result column="address" property="address"></result>
        </association>
    </resultMap>

    <!--一对一使用resultType返回对象-->
    <select id="findOrderUser" resultType="OrderCustomer">
      select orders.* ,user.username ,user.sex ,user.address
      from
      orders,user
      where orders.user_id = user.id
    </select>

    <!--一对一使用resultMap返回对象-->
    <select id="findOrderUserResultMap" resultMap="OrdersUserResultMap">
      select orders.* ,user.username ,user.sex ,user.address
      from
      orders,user
      where orders.user_id = user.id
    </select>


    <!-- 一对多使用resultMap返回
         订单以及订单明细的resultMap
         使用extends继承，不用在配置订单信息和用户信息打的映射
    -->
    <resultMap id="OrdersAndOrderDetailResultMap" type="Orders" extends="OrdersUserResultMap">
        <!--订单信息-->
        <!--<id column="id" property="id"></id>-->
        <!--<result column="user_id" property="userId"></result>-->
        <!--<result column="number" property="number"></result>-->
        <!--<result column="createtime" property="createtime"></result>-->
        <!--<result column="note" property="note"></result>-->
        <!--用户信息-->
        <!--<association property="user" javaType="com.wang.po.User">-->
        <!--<id column="user_id" property="id"></id>-->
        <!--<result column="username" property="username"></result>-->
        <!--<result column="sex" property="sex"></result>-->
        <!--<result column="address" property="address"></result>-->
        <!--</association>-->

        <!--订单明细信息
            一个订单关联出了很多明细，要使用collection进行映射额
            collection:对关联对象查询到多条记录映射到集合对象
            property:将关联查询到多条映射到com.wang.po.Order哪个属性
            ofType:指定映射到list集合属性中pojo的类型
        -->
        <collection property="orderdetails" ofType="com.wang.po.Orderdetail">
            <!-- id:订单明细唯一id
                 property:要将订单明细的唯一标示映射到com.wang.po.Orderdetail的哪个属性
            -->
            <id column="orderdetail_id" property="id"></id>
            <result column="items_id" property="itemsId"></result>
            <result column="items_number" property="itemsNum"></result>
            <result column="order_id" property="orderId"></result>
        </collection>

    </resultMap>

    <!--查询订单关联用户和订单明细，使用resultMap（一对多）-->
    <select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
      SELECT orders.*,
	          user.username,
	          user.sex,
	          user.address,
	          orderdetail.id orderdetail_id,
	          orderdetail.items_id,
	          orderdetail.items_num,
	          orderdetail.order_id
      FROM
	          orders,
	  USER,
	          orderdetail
      WHERE orders.`user_id` = user.`id` AND orderdetail.`order_id` = orders.`id`
    </select>

    <!--多对多查询
        查询用户以及用户购买商品信息
        查询主表:用户表
        关联表:由于用户表和商品表没有直接关联，通过订单和
        订单明细进行关联，所以关联表:orders,orderdetail,items
    -->
    <resultMap id="UserAndItemsResultMap" type="com.wang.po.User">
        <!--用户信息-->
        <id column="user_id" property="id"></id>
        <result column="username" property="username"></result>
        <result column="sex" property="sex"></result>
        <result column="address" property="address"></result>
        <!--订单信息
            一个用户对应多个订单，使用collection映射-->
        <collection property="ordersList" ofType="com.wang.po.Orders">
            <id column="id" property="id"></id>
            <result column="user_id" property="userId"></result>
            <result column="number" property="number"></result>
            <result column="createtime" property="createtime"></result>
            <result column="note" property="note"></result>
            <!--订单明细
                一个订单包括多个明细
             -->
            <collection property="orderdetails" ofType="com.wang.po.Orderdetail">
                <id column="orderdetail_id" property="id"></id>
                <result column="items_id" property="itemsId"></result>
                <result column="items_number" property="itemsNum"></result>
                <result column="order_id" property="orderId"></result>

                <!--商品明细
                    一个订单明细对应一个商品
                    -->
                <association property="items" javaType="com.wang.po.Items">
                        <id column="items_id" property="id"></id>
                        <result column="items_name" property="name"></result>
                        <result column="items_detail" property="detail"></result>
                        <result column="items_price" property="price"></result>
                </association>
            </collection>
        </collection>

    </resultMap>
    <select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
        SELECT orders.*,
                user.`username`,
                user.`sex`,
                user.`address`,
                orderdetail.id orderdetail_id,
                orderdetail.items_id,
                orderdetail.items_num,
                orderdetail.order_id,
                items.`name` items_name,
                items.`detail` items_detail,
                items.`price` items_price
        FROM
               orders,
               orderdetail,
               items,
               USER
        WHERE
               orderdetail.`items_id` = items.`id` AND orders.`user_id`=user.`id` AND orderdetail.`order_id` = orders.`id`
    </select>
    
    <resultMap id="OrderUserLazyLoadingResultMap" type="com.wang.po.Orders">
        <!--对订单信息进行映射配置-->
        <id column="id" property="id"></id>
        <result column="user_id" property="userId"></result>
        <result column="number" property="number"></result>
        <result column="createtime" property="createtime"></result>
        <result column="note" property="note"></result>
        <!--对用户信息进行延迟加载
            select:指定延迟加载需要执行的的statement,是根据user_id查询用户信息的statement
            要使用userMap.xml中的findUserById完成根据用户id(user_id)用户信息的查询
            column:订单信息中关联用户信息的列，是user_id ，也就是传给关联表的参数
            关联查询的sql可以理解为：
            (SELECT username FROM USER WHERE orders.`user_id` = user.`id`) username,
	        (SELECT sex FROM USER WHERE orders.`user_id` = user.`id`) sex,
            (SELECT birthday FROM USER WHERE orders.`user_id` = user.`id`) birthday,
            (SELECT address FROM USER WHERE orders.`user_id` = user.`id`) address
            -->
        <association property="user" javaType="com.wang.po.User" select="com.wang.Mapper.UserMapper.findUserById" column="user_id">
        </association>
    </resultMap>
    
    <!--查询订单关联用户，用户信息需要延迟加载-->
    <select id="findOrderUserLazyLoading" resultMap="OrderUserLazyLoadingResultMap">
        select * from orders
    </select>
</mapper>